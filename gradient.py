import random
from abc import ABC, abstractmethod


class GradientGroup(ABC):

    @abstractmethod
    def get_gradient_color(self) -> list[tuple[int, int, int]]:
        pass


class RandomGradientGroup(GradientGroup):

    def get_gradient_color(self) -> list[tuple[int, int, int]]:
        return [
            (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
            for _ in range(0, random.randint(2, 5))
        ]


class BaseGradientGroup(GradientGroup):
    _gradient = [
        [(0x00, 0x0B, 0x00), (0x25, 0x2B, 0x41), (0xCE, 0x41, 0x3E), (0xC1, 0xBD, 0xB8), (0xFB, 0xFA, 0xF5)],
        [(0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0xff, 0xff, 0xff)],
        [(0x42, 0xa5, 0xc6), (0x15, 0x81, 0xc4), (0x13, 0x1f, 0x8d), (0x32, 0x0e, 0x1f), (0x90, 0x31, 0x1e), (0xa6, 0x66, 0x02), (0xad, 0x91, 0x2a), (0xaa, 0xaa, 0xaa), (0xaa, 0xaa, 0xaa), (0xaa, 0xaa, 0xaa), (0xaa, 0xaa, 0xaa), (0xaa, 0xaa, 0xaa), (0xaa, 0xaa, 0xaa)],
    ]

    def get_gradient_color(self) -> list[tuple[int, int, int]]:
        return random.choice(self._gradient)


class SkyGradientGroup(GradientGroup):
    _gradient = [
        [(0x1c, 0x44, 0x68), (0x3f, 0x79, 0xc0), (0xc2, 0xc3, 0xc8), (0xdb, 0xb2, 0x8c), (0xf5, 0x60, 0x38)], # SunRise
        # [(0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0xff, 0xff, 0xff)],
        # [(0x42, 0xa5, 0xc6), (0x15, 0x81, 0xc4), (0x13, 0x1f, 0x8d), (0x32, 0x0e, 0x1f), (0x90, 0x31, 0x1e), (0xa6, 0x66, 0x02), (0xad, 0x91, 0x2a), (0xaa, 0xaa, 0xaa), (0xaa, 0xaa, 0xaa), (0xaa, 0xaa, 0xaa), (0xaa, 0xaa, 0xaa), (0xaa, 0xaa, 0xaa), (0xaa, 0xaa, 0xaa)],
    ]

    def get_gradient_color(self) -> list[tuple[int, int, int]]:
        return random.choice(self._gradient)

